	Identifying and resolving performance issues in large software systems
can be a difficult task.  In particular, it is difficult to know to what
extent a piece of code affects the overall performance of a system by
simply analyzing the source code.  It is even harder to understand
why that happens.  In order to support software engineers in these
tasks, we want to gain more information about the performance
characteristics of a piece of code.  Traditional performance profiling
provides a good starting point.  In profiling, one measures and
associates aggregate performance metrics (e.g., execution time) with
various parts of the code (e.g., methods).  In this project we want to
go a bit further.  We want to relate performance metrics of specific
executions with relevant features of the input or the state of the system
within those executions (e.g., relating the size of the input with the
execution time).

	We start by instrumenting one or more systems and focus on some part of the
code that affects performance in a significant way, for which we then identify
relevant features of the input (or state).  Next, we run the system with
various inputs, and collect performance and feature data.  We then perform a
statistical analysis of that data, which might lead to further analysis
of the code and possibly more indicative features.  The ultimate
goal of this analysis is to formulate synthetic performance annotations
for the system and its components.

-------------------------------------------------------------------------------
	Identifying and resolving performance issues in large software systems can be a difficult task.  In particular, it is difficult to know to what extent a piece of code affects the overall performance of a system by simply analyzing the source code.  It is even harder to understand why that happens.  In order to support software engineers in these tasks, we want to gain more information about the performance characteristics of a piece of code. In traditional performance profiling, one measures and associates aggregate performance metrics (e.g., execution time) with various parts of the code (e.g., methods).  In this project we aim to go a bit further by relating performance metrics of specific executions with relevant features of the input or the state of the system within those executions (e.g., relating the size of the input with the execution time). We then perform a statistical analysis of the performance and feature data, which might lead to further analysis of the code and possibly more indicative features.  The ultimate goal of this analysis is to formulate synthetic performance annotations for the system and its components.

-------------------------------------------------------------------------------

    Identifying and resolving performance issues in large software systems can be a difficult task. In particular, it is difficult to know how and why a piece of code is affecting the overall performance of a system, by simply looking at the source code. Gaining more information about the performance characteristics of a piece of code would help detect such performance issues efficiently. This paper provides examples of instrumenting one such system, identifying useful features of the section of code with regards to the performance characteristic being measured, plotting the correlation between the feature and the performance characteristics and conducting further analysis on these correlations to derive performance annotations.
	----------------------------------------------------------------------------
